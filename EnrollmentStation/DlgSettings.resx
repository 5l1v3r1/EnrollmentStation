<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AYDwAHOA8MD/gPnw/4D/8P+A//H/gA==
</value>
  </data>
</root>